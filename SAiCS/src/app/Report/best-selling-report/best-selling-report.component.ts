import { CurrencyPipe } from '@angular/common';
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { AlertController } from '@ionic/angular';
import { ApiService } from 'src/app/Services/api.service';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import Chart from 'chart.js/auto'


@Component({
  selector: 'app-best-selling-report',
  templateUrl: './best-selling-report.component.html',
  styleUrls: ['./best-selling-report.component.scss'],
})
export class BestSellingReportComponent implements OnInit {
  merchCat: any = [];
  rowData: any = [];
  reportForm: FormGroup;
  @ViewChild('barCanvas') private barCanvas: ElementRef;
  barChart: any;

  constructor(private api: ApiService,
    private cp: CurrencyPipe,
    private fb: FormBuilder,
    private alert: AlertController) { }

  ngOnInit() {
    this.GetMerchCat();
    this.reportForm = this.fb.group({
      startDate: new FormControl('', Validators.required),
      endDate: new FormControl('', Validators.required),
      category: new FormControl('', Validators.required),
    });
  }

  GetMerchCat() {
    this.api.GetMerchCat().subscribe((data) => {
      this.merchCat = data;
      console.log('Loaded categories successfully');
    });
  }

  submitForm() {
    if (
      this.reportForm.valid &&
      this.reportForm.get(['startDate']).value <=
        this.reportForm.get(['endDate']).value
    ) {
  
      let salesForm = {
        startDate: this.reportForm.get('startDate').value,
        endDate: this.reportForm.get('endDate').value,
        category: this.reportForm.get('category').value,
      };


      this.api.TopProduct(salesForm).subscribe((res) => {
        this.rowData = res;
        if(this.rowData.length == 0)
        {
          this.Notif("No results")
        }
        else
        {
          this.createPieChart()
        }
      });

     
   
    } else {
      this.ErrorAlert('Please Enter Valid Information');
    }
  }

  
  createPieChart() {
    var chartExist = Chart.getChart("myChart"); // <canvas> id
    if (chartExist != undefined)  
      chartExist.destroy(); 

      this.barChart = new Chart(this.barCanvas.nativeElement, {
        type: 'bar',
        data: {
          labels: this.rowData.map(x => x.name),
          datasets:[{
            label: '',
            data: this.rowData.map(x => x.quantity),
            backgroundColor: [
              "#f29cb9",
            ],
            hoverBackgroundColor: [
              "#f29cb9",
            ],
            borderWidth: 2,

          }]},
        options: {
          responsive: true,
          indexAxis: 'y',
          scales:{
            x: {
              title: { display: true, text: 'Quanity Sold' }
            },
          },
        plugins:
        {
          legend: {display: false}
        }
          }
      });
   
  }

  async ErrorAlert(message: string) {
    const alert = await this.alert.create({
      header: 'Invalid Form',
      message: message,
      buttons: [{ text: 'OK' }],
    });

    await alert.present();
  }

  async download() {
    if(this.rowData.length)
    {
    
      this.reportForm.reset();
      var doc = new jsPDF('p', 'pt', 'A4');
      
      var img = new Image();
      img.src = 'assets/SAICS no bg.png';   
      var totalPagesExp = '{total_pages_count_string}'
      var username = localStorage.getItem('UserName')

      
      var canvas = document.getElementById('myChart') as HTMLCanvasElement;
      var barChartImage = canvas.toDataURL('image/png', 1.0);

      doc.setFontSize(20);
      if (img) {
        doc.addImage(img, 'png', -40, -60, 250, 250);
      }
      doc.text('Best Selling Products Report', 155, 70)

      doc.addImage(barChartImage, 'png', 90, 130, 410, 345);

      // Footer
      let pageInfo = doc.getCurrentPageInfo()
      var str = 'Page ' + pageInfo.pageNumber + ' of ' + doc.getNumberOfPages();

      doc.setFontSize(10);
      var pageSize = doc.internal.pageSize;
      var pageHeight = pageSize.height
        ? pageSize.height
        : pageSize.getHeight();
      doc.text(str, 40, pageHeight - 10);
      doc.text(
        `Generated by ${username} on ${new Date().toDateString()}`, 360,
        pageHeight - 10
      );

      doc.save('Top Products Report.pdf');

  }
  else
  {
    this.ErrorAlert("Generate Report before exporting")
  }
}

async Notif(message:string) {
  const alert = await this.alert.create({
    message: message,
    buttons: [{text: 'OK'}]
  });

  await alert.present();
  
}

}


