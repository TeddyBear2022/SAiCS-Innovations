// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAiCSInnovationsAPI_3._0.Models;

namespace SAiCSInnovationsAPI_3._0.Migrations
{
    [DbContext(typeof(SaicsInnovationsDBContext))]
    [Migration("20220811135655_ReportUpdate")]
    partial class ReportUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccessLevelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessLevelName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("AccessLevelId");

                    b.ToTable("AccessLevel");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("RecipientNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Iddocument")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IDDocument");

                    b.Property<string>("Idnumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("ProofOfAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Ambassador", b =>
                {
                    b.Property<int>("AmbassadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("AmbassadorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorTypeID");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("BankAccountID");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idphoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("IDPhoto");

                    b.Property<byte[]>("ProofOfAddress")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("AmbassadorId");

                    b.HasIndex("AmbassadorTypeId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Ambassador");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AmbassadorEnrollment", b =>
                {
                    b.Property<int>("AmbassadorEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorEnrollmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.HasKey("AmbassadorEnrollmentId");

                    b.HasIndex("AmbassadorId");

                    b.HasIndex("CourseId");

                    b.ToTable("AmbassadorEnrollment");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AmbassadorType", b =>
                {
                    b.Property<int>("AmbassadorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmbassadorTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AmbassadorTypeId");

                    b.ToTable("AmbassadorType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationStatusID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ApplicationStatus", b =>
                {
                    b.Property<int>("ApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ApplicationStatusId");

                    b.ToTable("ApplicationStatus");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditTrailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<DateTime?>("AuditLogDatestamp")
                        .HasColumnType("date")
                        .HasColumnName("Audit_Log_Datestamp");

                    b.Property<string>("AuditLogDescription")
                        .HasColumnType("text")
                        .HasColumnName("Audit_Log_Description");

                    b.Property<byte[]>("AuditLogTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Audit_Log_Timestamp");

                    b.HasKey("AuditTrailId");

                    b.HasIndex("AdminId");

                    b.HasIndex("AmbassadorId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankAccountID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeID");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.HasKey("BankAccountId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<int?>("MerchandiseId")
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("SpecialId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("SpecialId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<string>("CertificateDescription")
                        .HasColumnType("text");

                    b.Property<string>("CertificateName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CertificateId");

                    b.HasIndex("AmbassadorId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ClientId");

                    b.HasIndex("AmbassadorId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ContentTypeID");

                    b.Property<byte[]>("ContentUpload")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.HasKey("ContentId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("SectionId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<string>("CourseName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("CourseStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CourseStatusID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CourseId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseStatusId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.CourseStatus", b =>
                {
                    b.Property<int>("CourseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseStatusName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CourseStatusId");

                    b.ToTable("CourseStatus");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeliveryAmountId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryAmountID");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DeliveryAmountId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.DeliveryAmount", b =>
                {
                    b.Property<int>("DeliveryAmountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryAmountID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryAmount1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("DeliveryAmount");

                    b.HasKey("DeliveryAmountId");

                    b.ToTable("DeliveryAmount");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faq", b =>
                {
                    b.Property<int>("Faqid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Faqanswers")
                        .HasColumnType("text")
                        .HasColumnName("FAQAnswers");

                    b.Property<int?>("FaqcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FaqcategoryID");

                    b.Property<string>("Faqquestion")
                        .HasColumnType("text")
                        .HasColumnName("FAQQuestion");

                    b.HasKey("Faqid");

                    b.HasIndex("FaqcategoryId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faqcategory", b =>
                {
                    b.Property<int>("FaqcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("FaqtypeId")
                        .HasColumnType("int")
                        .HasColumnName("FAQTypeID");

                    b.HasKey("FaqcategoryId");

                    b.HasIndex("FaqtypeId");

                    b.ToTable("FAQCategory");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faqtype", b =>
                {
                    b.Property<int>("FaqtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FaqtypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FAQTypeName");

                    b.HasKey("FaqtypeId");

                    b.ToTable("FAQType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FeedbackTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackTypeID");

                    b.Property<int?>("MerchandiseId")
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AmbassadorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.FeedbackType", b =>
                {
                    b.Property<int>("FeedbackTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeedbackTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("FeedbackTypeId");

                    b.ToTable("FeedbackType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchCategory", b =>
                {
                    b.Property<int>("MerchCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MerchCategoryID")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MerchCategoryName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MerchCategoryId");

                    b.ToTable("MerchCategory");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchSpecial", b =>
                {
                    b.Property<int>("MerchSpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MerchSpecialID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MerchandiseId")
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID");

                    b.Property<int?>("SpecialId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    b.HasKey("MerchSpecialId");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("SpecialId");

                    b.ToTable("MerchSpecial");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchStatus", b =>
                {
                    b.Property<int>("MerchStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MerchStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MerchStatusName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MerchStatusId");

                    b.ToTable("MerchStatus");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchType", b =>
                {
                    b.Property<int>("MerchTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MerchTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MerchTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MerchTypeId");

                    b.ToTable("MerchType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Merchandise", b =>
                {
                    b.Property<int>("MerchandiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("MerchCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MerchCategoryID");

                    b.Property<string>("MerchImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MerchName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("MerchStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MerchStatusID");

                    b.Property<int?>("MerchTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MerchTypeID");

                    b.HasKey("MerchandiseId");

                    b.HasIndex("MerchCategoryId");

                    b.HasIndex("MerchStatusId");

                    b.HasIndex("MerchTypeId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerOption")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("QuestionBankId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionBankID");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryID");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID");

                    b.Property<byte[]>("ProofOfPayment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AmbassadorId");

                    b.HasIndex("CartId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MerchandiseId")
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("SpecialId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    b.HasKey("OrderItemId");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecialId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderStatusName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Password", b =>
                {
                    b.Property<int>("PasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PasswordID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateSet")
                        .HasColumnType("date");

                    b.Property<string>("HashedOtp")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("HashedOTP");

                    b.Property<DateTime?>("OtpexpireTime")
                        .HasColumnType("date")
                        .HasColumnName("OTPExpireTime");

                    b.Property<string>("Password1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Password");

                    b.Property<string>("ResetPasswordLink")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("PasswordId");

                    b.HasIndex("UserId");

                    b.ToTable("Password");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.PositionRequest", b =>
                {
                    b.Property<int>("PositionRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PositionRequestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RequestTypeID");

                    b.HasKey("PositionRequestId");

                    b.HasIndex("AmbassadorId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("PositionRequest");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("MerchandiseId")
                        .HasColumnType("int")
                        .HasColumnName("MerchandiseID");

                    b.Property<decimal?>("Price1")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.HasKey("PriceId");

                    b.HasIndex("MerchandiseId");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.QuestionBank", b =>
                {
                    b.Property<int>("QuestionBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionBankID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answers")
                        .HasColumnType("text");

                    b.Property<string>("Questions")
                        .HasColumnType("text");

                    b.HasKey("QuestionBankId");

                    b.ToTable("QuestionBank");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuizID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionBankId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionBankID");

                    b.Property<string>("QuizDescription")
                        .HasColumnType("text");

                    b.Property<string>("QuizName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.HasKey("QuizId");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("SectionId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReferralID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("ReferralCodeId")
                        .HasColumnType("int")
                        .HasColumnName("ReferralCodeID");

                    b.Property<int?>("ReferralLinkTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ReferralLinkTypeID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ReferralId");

                    b.HasIndex("ReferralCodeId");

                    b.HasIndex("ReferralLinkTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ReferralCode", b =>
                {
                    b.Property<int>("ReferralCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReferralCodeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<string>("IsActive")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ReferralCode1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ReferralCode");

                    b.HasKey("ReferralCodeId");

                    b.HasIndex("AmbassadorId");

                    b.ToTable("ReferralCode");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ReferralLinkType", b =>
                {
                    b.Property<int>("ReferralLinkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReferralLinkTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReferralType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ReferralLinkTypeId");

                    b.ToTable("ReferralLinkType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("SectionName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SectionId");

                    b.HasIndex("CourseId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Special", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("SpecialName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SpecialTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialTypeID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("SpecialId");

                    b.HasIndex("SpecialTypeId");

                    b.ToTable("Special");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.SpecialType", b =>
                {
                    b.Property<int>("SpecialTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialTypeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("SpecialTypeId");

                    b.ToTable("SpecialType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Target", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TargetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmbassadorId")
                        .HasColumnType("int")
                        .HasColumnName("AmbassadorID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Target1")
                        .HasColumnType("money")
                        .HasColumnName("Target");

                    b.HasKey("TargetId");

                    b.HasIndex("AmbassadorId");

                    b.ToTable("Target");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TitleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleName")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("TitleId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevelId")
                        .HasColumnType("int")
                        .HasColumnName("AccessLevelID");

                    b.Property<string>("UserRoleName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Vat", b =>
                {
                    b.Property<int>("Vatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VATID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Vatid");

                    b.ToTable("VAT");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Surname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Address", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Country");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Address_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Admin", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Admin_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Ambassador", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.AmbassadorType", "AmbassadorType")
                        .WithMany("Ambassadors")
                        .HasForeignKey("AmbassadorTypeId")
                        .HasConstraintName("FK_Ambassador_AmbassadorType");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.BankAccount", "BankAccount")
                        .WithMany("Ambassadors")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_Ambassador_BankAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Ambassadors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Ambassador_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AmbassadorType");

                    b.Navigation("BankAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AmbassadorEnrollment", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("AmbassadorEnrollments")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_AmbassadorEnrollment_Ambassador");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Course", "Course")
                        .WithMany("AmbassadorEnrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_AmbassadorEnrollment_Course");

                    b.Navigation("Ambassador");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Application", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.ApplicationStatus", "ApplicationStatus")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationStatusId")
                        .HasConstraintName("FK_Application_ApplicationStatus");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Application_User");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AuditTrail", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Admin", "Admin")
                        .WithMany("AuditTrails")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_AuditTrail_Admin");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("AuditTrails")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_AuditTrail_Ambassador");

                    b.Navigation("Admin");

                    b.Navigation("Ambassador");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.BankAccount", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.AccountType", "AccountType")
                        .WithMany("BankAccounts")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_BankAccount_AccountType");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_BankAccount_Bank");

                    b.Navigation("AccountType");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Cart", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Cart_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.CartItem", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartItem_Cart")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Merchandise", "Merchandise")
                        .WithMany("CartItems")
                        .HasForeignKey("MerchandiseId")
                        .HasConstraintName("FK_CartItem_Merchandise");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Special", "Special")
                        .WithMany("CartItems")
                        .HasForeignKey("SpecialId")
                        .HasConstraintName("FK_CartItem_Special");

                    b.Navigation("Cart");

                    b.Navigation("Merchandise");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Certificate", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("Certificates")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_Certificate_Ambassador");

                    b.Navigation("Ambassador");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Client", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("Clients")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_Client_Ambassador")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Client_User");

                    b.Navigation("Ambassador");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Content", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.ContentType", "ContentType")
                        .WithMany("Contents")
                        .HasForeignKey("ContentTypeId")
                        .HasConstraintName("FK_Content_ContentType");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Section", "Section")
                        .WithMany("Contents")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Content_Section");

                    b.Navigation("ContentType");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Course", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Admin", "Admin")
                        .WithMany("Courses")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_Course_Admin");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.CourseStatus", "CourseStatus")
                        .WithMany("Courses")
                        .HasForeignKey("CourseStatusId")
                        .HasConstraintName("FK_Course_CourseStatus");

                    b.Navigation("Admin");

                    b.Navigation("CourseStatus");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Delivery", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.DeliveryAmount", "DeliveryAmount")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryAmountId")
                        .HasConstraintName("FK_Delivery_DeliveryAmount");

                    b.Navigation("DeliveryAmount");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faq", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Faqcategory", "Faqcategory")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqcategoryId")
                        .HasConstraintName("FK_FAQ_FAQType");

                    b.Navigation("Faqcategory");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faqcategory", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Faqtype", "Faqtype")
                        .WithMany("Faqcategories")
                        .HasForeignKey("FaqtypeId")
                        .HasConstraintName("FK_FAQCategory_FAQType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Faqtype");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Feedback", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_Feedback_Ambassador");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Client", "Client")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Feedback_Client")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.FeedbackType", "FeedbackType")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackTypeId")
                        .HasConstraintName("FK_Feedback_FeedbackType");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Merchandise", "Merchandise")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MerchandiseId")
                        .HasConstraintName("FK_Feedback_Merchandise");

                    b.Navigation("Ambassador");

                    b.Navigation("Client");

                    b.Navigation("FeedbackType");

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchSpecial", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Merchandise", "Merchandise")
                        .WithMany("MerchSpecials")
                        .HasForeignKey("MerchandiseId")
                        .HasConstraintName("FK_MerchSpecial_Merchandise");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Special", "Special")
                        .WithMany("MerchSpecials")
                        .HasForeignKey("SpecialId")
                        .HasConstraintName("FK_MerchSpecial_Special");

                    b.Navigation("Merchandise");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Merchandise", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.MerchCategory", "MerchCategory")
                        .WithMany("Merchandises")
                        .HasForeignKey("MerchCategoryId")
                        .HasConstraintName("FK_Merchandise_MerchCategory");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.MerchStatus", "MerchStatuses")
                        .WithMany("Merchandises")
                        .HasForeignKey("MerchStatusId")
                        .HasConstraintName("FK_Merchandise_MerchStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.MerchType", "MerchType")
                        .WithMany("Merchandises")
                        .HasForeignKey("MerchTypeId")
                        .HasConstraintName("FK_Merchandise_MerchType");

                    b.Navigation("MerchCategory");

                    b.Navigation("MerchStatuses");

                    b.Navigation("MerchType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Option", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.QuestionBank", "QuestionBank")
                        .WithMany("Options")
                        .HasForeignKey("QuestionBankId")
                        .HasConstraintName("FK_Option_QuestionBank");

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Order", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("Orders")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_Order_Ambassador");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Cart", "Cart")
                        .WithMany("Orders")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_Order_Cart");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_Order_Delivery");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Address");

                    b.Navigation("Ambassador");

                    b.Navigation("Cart");

                    b.Navigation("Delivery");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.OrderItem", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Merchandise", "Merchandise")
                        .WithMany("OrderItems")
                        .HasForeignKey("MerchandiseId")
                        .HasConstraintName("FK_OrderItem_Merchandise");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Special", "Special")
                        .WithMany("OrderItems")
                        .HasForeignKey("SpecialId")
                        .HasConstraintName("FK_OrderItem_Special");

                    b.Navigation("Merchandise");

                    b.Navigation("Order");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Password", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Password_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.PositionRequest", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("PositionRequests")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_PositionRequest_Ambassador");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.RequestType", "RequestType")
                        .WithMany("PositionRequests")
                        .HasForeignKey("RequestTypeId")
                        .HasConstraintName("FK_PositionRequest_RequestType");

                    b.Navigation("Ambassador");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Price", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Merchandise", "Merchandise")
                        .WithMany("Prices")
                        .HasForeignKey("MerchandiseId")
                        .HasConstraintName("FK_Price_Merchandise");

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Quiz", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.QuestionBank", "QuestionBank")
                        .WithMany("Quizzes")
                        .HasForeignKey("QuestionBankId")
                        .HasConstraintName("FK_Quiz_QuestionBank");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Section", "Section")
                        .WithMany("Quizzes")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Quiz_Section");

                    b.Navigation("QuestionBank");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Referral", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.ReferralCode", "ReferralCode")
                        .WithMany("Referrals")
                        .HasForeignKey("ReferralCodeId")
                        .HasConstraintName("FK_Referral_ReferralCode");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.ReferralLinkType", "ReferralLinkType")
                        .WithMany("Referrals")
                        .HasForeignKey("ReferralLinkTypeId")
                        .HasConstraintName("FK_Referral_Referral");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.User", "User")
                        .WithMany("Referrals")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Referral_User");

                    b.Navigation("ReferralCode");

                    b.Navigation("ReferralLinkType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ReferralCode", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("ReferralCodes")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_ReferralCode_Ambassador");

                    b.Navigation("Ambassador");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Section", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Section_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Special", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.SpecialType", "SpecialType")
                        .WithMany("Specials")
                        .HasForeignKey("SpecialTypeId")
                        .HasConstraintName("FK_Special_SpecialType");

                    b.Navigation("SpecialType");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Target", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Ambassador", "Ambassador")
                        .WithMany("Targets")
                        .HasForeignKey("AmbassadorId")
                        .HasConstraintName("FK_Target_Ambassador");

                    b.Navigation("Ambassador");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.UserRole", b =>
                {
                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.AccessLevel", "AccessLevel")
                        .WithMany("UserRoles")
                        .HasForeignKey("AccessLevelId")
                        .HasConstraintName("FK_UserRoleID_AccessLevel");

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("SAiCSInnovationsAPI_3._0.Models.User", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.Title", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_User_Title");

                    b.HasOne("SAiCSInnovationsAPI_3._0.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_User_UserRoleID");

                    b.Navigation("Title");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AccessLevel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AccountType", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Admin", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Ambassador", b =>
                {
                    b.Navigation("AmbassadorEnrollments");

                    b.Navigation("AuditTrails");

                    b.Navigation("Certificates");

                    b.Navigation("Clients");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("PositionRequests");

                    b.Navigation("ReferralCodes");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.AmbassadorType", b =>
                {
                    b.Navigation("Ambassadors");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.BankAccount", b =>
                {
                    b.Navigation("Ambassadors");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Client", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ContentType", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Course", b =>
                {
                    b.Navigation("AmbassadorEnrollments");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.CourseStatus", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.DeliveryAmount", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faqcategory", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Faqtype", b =>
                {
                    b.Navigation("Faqcategories");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchCategory", b =>
                {
                    b.Navigation("Merchandises");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchStatus", b =>
                {
                    b.Navigation("Merchandises");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.MerchType", b =>
                {
                    b.Navigation("Merchandises");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Merchandise", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Feedbacks");

                    b.Navigation("MerchSpecials");

                    b.Navigation("OrderItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.QuestionBank", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ReferralCode", b =>
                {
                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.ReferralLinkType", b =>
                {
                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.RequestType", b =>
                {
                    b.Navigation("PositionRequests");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Section", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Special", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("MerchSpecials");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.SpecialType", b =>
                {
                    b.Navigation("Specials");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.Title", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SAiCSInnovationsAPI_3._0.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Admins");

                    b.Navigation("Ambassadors");

                    b.Navigation("Applications");

                    b.Navigation("Carts");

                    b.Navigation("Clients");

                    b.Navigation("Orders");

                    b.Navigation("Passwords");

                    b.Navigation("Referrals");
                });
#pragma warning restore 612, 618
        }
    }
}
